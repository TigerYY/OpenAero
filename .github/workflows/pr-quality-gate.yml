name: PR Quality Gate

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run enhanced linting
      run: npm run lint:enhanced
      
    - name: Run enhanced formatting check
      run: npm run format:check:enhanced
      
    - name: Run enhanced TypeScript check
      run: npm run type-check:enhanced
      
    - name: Run enhanced tests with coverage
      run: npm run test:coverage:enhanced
      
    - name: Check test coverage threshold
      run: |
        COVERAGE=$(npm run test:coverage:enhanced --silent | grep -o 'All files.*[0-9]\+\.[0-9]\+' | grep -o '[0-9]\+\.[0-9]\+' | tail -1)
        echo "Current coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 85" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below required 85%"
          exit 1
        else
          echo "‚úÖ Coverage $COVERAGE% meets requirement"
        fi
      
    - name: Run security audit
      run: npm run security:check
      
    - name: Check bundle size
      run: npm run build && npm run bundle:analyze
      
    - name: Comment PR with quality report
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          let report = '## üîç Quality Gate Report\n\n';
          
          // Add coverage info if available
          try {
            const coverage = fs.readFileSync('coverage/coverage-summary.json', 'utf8');
            const coverageData = JSON.parse(coverage);
            const totalCoverage = coverageData.total.lines.pct;
            
            report += `### üìä Test Coverage: ${totalCoverage}%\n`;
            report += totalCoverage >= 85 ? '‚úÖ Meets requirement (‚â•85%)\n\n' : '‚ùå Below requirement (‚â•85%)\n\n';
          } catch (e) {
            report += '### üìä Test Coverage: Unable to determine\n\n';
          }
          
          report += '### üõ†Ô∏è Quality Checks\n';
          report += '- ESLint: ' + (process.env.LINT_STATUS === 'success' ? '‚úÖ' : '‚ùå') + '\n';
          report += '- Prettier: ' + (process.env.FORMAT_STATUS === 'success' ? '‚úÖ' : '‚ùå') + '\n';
          report += '- TypeScript: ' + (process.env.TYPE_STATUS === 'success' ? '‚úÖ' : '‚ùå') + '\n';
          report += '- Tests: ' + (process.env.TEST_STATUS === 'success' ? '‚úÖ' : '‚ùå') + '\n';
          report += '- Security: ' + (process.env.SECURITY_STATUS === 'success' ? '‚úÖ' : '‚ùå') + '\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  size-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Check bundle size
      uses: andresz1/size-limit-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        skip_step: install