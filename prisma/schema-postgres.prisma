// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  firstName     String?
  lastName      String?
  avatar        String?
  role          UserRole @default(USER)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  creatorProfile    CreatorProfile?
  solutions         Solution[]
  orders            Order[]
  reviews           Review[]
  favorites         Favorite[]
  sessions          UserSession[]
  emailVerifications EmailVerification[]
  auditLogs         AuditLog[]
  files             File[]
  uploadedFiles     SolutionFile[] // 上传的文件
  solutionReviews   SolutionReview[] // 审核的方案
  carts             Cart[]
  productReviews    ProductReview[]
  createdVersions   SolutionVersion[] @relation("SolutionVersionCreator") // 创建的版本
  notifications     Notification[] // 用户通知
  notificationPreference NotificationPreference? // 通知偏好
  collaborationSessions CollaborationSession[] // 协作会话
  collaborationOperations CollaborationOperation[] // 协作操作

  @@map("users")
}

// 创作者档案
model CreatorProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  website     String?
  experience  String?
  specialties String[] // 专业领域
  status      CreatorStatus @default(PENDING)
  revenue     Decimal  @default(0) @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  solutions     Solution[]
  revenueShares RevenueShare[]

  @@map("creator_profiles")
}

// 解决方案模型
model Solution {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  price       Decimal  @db.Decimal(10, 2)
  status      SolutionStatus @default(DRAFT)
  images      String[] // 图片URL数组
  features    String[] // 功能特性
  specs       Json?    // 技术规格JSON
  bom         Json?    // BOM清单JSON
  creatorId   String
  userId      String   // 添加用户关联
  
  // 版本控制
  version     Int      @default(1)
  
  // 审核相关
  submittedAt DateTime? // 提交审核时间
  reviewedAt  DateTime? // 审核完成时间
  reviewNotes String?   // 审核备注
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  creator       CreatorProfile  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        OrderSolution[]
  reviews       Review[]
  favorites     Favorite[]
  revenueShares RevenueShare[]
  sampleOrders  SampleOrder[]
  files         SolutionFile[]  // 方案文件
  products      Product[]       // 基于此方案的商品
  solutionReviews SolutionReview[] // 方案审核记录
  versionHistory SolutionVersion[] // 版本历史记录

  @@map("solutions")
}

// 方案版本历史模型
model SolutionVersion {
  id          String   @id @default(cuid())
  solutionId  String
  version     Int      // 版本号
  title       String
  description String
  category    String
  price       Decimal  @db.Decimal(10, 2)
  images      String[] // 图片URL数组
  features    String[] // 功能特性
  specs       Json?    // 技术规格JSON
  bom         Json?    // BOM清单JSON
  
  // 版本元数据
  changeLog   String?  // 版本变更日志
  isActive    Boolean  @default(false) // 是否为当前活跃版本
  
  // 创建信息
  createdBy   String   // 创建版本的用户ID
  createdAt   DateTime @default(now())
  
  // 关联关系
  solution    Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  creator     User     @relation("SolutionVersionCreator", fields: [createdBy], references: [id])

  @@unique([solutionId, version]) // 确保同一方案的版本号唯一
  @@map("solution_versions")
}

// 方案文件模型
model SolutionFile {
  id           String   @id @default(cuid())
  solutionId   String?  // 可选，允许文件先上传后关联
  filename     String
  originalName String
  fileType     SolutionFileType
  mimeType     String
  size         Int      // 文件大小(字节)
  path         String   // 文件存储路径
  url          String   // 文件访问URL
  thumbnailUrl String?  // 缩略图URL(图片/PDF)
  checksum     String   // 文件校验和
  
  // 文件元数据
  metadata     Json?    // 文件元数据(尺寸、页数等)
  description  String?  // 文件描述
  
  // 状态管理
  status       FileStatus @default(ACTIVE)
  uploadedBy   String   // 上传者ID
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  solution Solution? @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  uploader User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("solution_files")
}

// 方案审核模型
model SolutionReview {
  id           String   @id @default(cuid())
  solutionId   String
  reviewerId   String   // 审核员ID
  
  // 审核内容
  status       ReviewStatus
  score        Int?     // 审核评分(1-10)
  comments     String?  // 审核意见
  
  // 审核维度
  qualityScore    Int? // 质量评分(1-10)
  completeness    Int? // 完整性评分(1-10)
  innovation      Int? // 创新性评分(1-10)
  marketPotential Int? // 市场潜力评分(1-10)
  
  // 审核决策
  decision     ReviewDecision
  decisionNotes String? // 决策说明
  
  // 改进建议
  suggestions  String[] // 改进建议列表
  
  // 时间记录
  reviewStartedAt DateTime? // 开始审核时间
  reviewedAt      DateTime? // 完成审核时间
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  solution Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  reviewer User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@map("solution_reviews")
}

// 订单模型
model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Decimal     @db.Decimal(10, 2)
  
  // 订单详情
  orderNumber String?    @unique // 订单号
  notes       String?    // 订单备注
  
  // 地址信息 (如果需要物流)
  shippingAddress Json?  // 收货地址
  billingAddress  Json?  // 账单地址
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // 关联关系
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderSolutions     OrderSolution[]
  orderItems         OrderItem[]
  paymentTransactions PaymentTransaction[]
  revenueShares      RevenueShare[]
  productReviews     ProductReview[]

  @@map("orders")
}

// 订单解决方案关联表 (订单项表)
model OrderSolution {
  id         String  @id @default(cuid())
  orderId    String
  solutionId String
  quantity   Int     @default(1)
  price      Decimal @db.Decimal(10, 2)
  subtotal   Decimal @db.Decimal(10, 2) // 小计 = quantity * price

  // 关联关系
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  solution Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  @@unique([orderId, solutionId])
  @@map("order_solutions")
}

// 支付交易表
model PaymentTransaction {
  id              String            @id @default(cuid())
  orderId         String
  paymentMethod   PaymentMethod     // 支付方式：支付宝、微信支付等
  paymentProvider String            // 支付提供商：alipay、wechat
  amount          Decimal           @db.Decimal(10, 2)
  currency        String            @default("CNY")
  status          PaymentStatus     @default(PENDING)
  
  // 第三方支付信息
  externalId      String?           // 第三方支付订单号
  externalStatus  String?           // 第三方支付状态
  
  // 支付详情
  paidAt          DateTime?         // 支付完成时间
  failureReason   String?           // 失败原因
  refundAmount    Decimal?          @db.Decimal(10, 2) // 退款金额
  refundedAt      DateTime?         // 退款时间
  
  // 元数据
  metadata        Json?             // 额外的支付信息
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // 关联关系
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_transactions")
}

// 收益分成表
model RevenueShare {
  id              String            @id @default(cuid())
  orderId         String
  solutionId      String
  creatorId       String
  
  // 收益计算
  totalAmount     Decimal           @db.Decimal(10, 2) // 总金额
  platformFee     Decimal           @db.Decimal(10, 2) // 平台费用 (5%)
  creatorRevenue  Decimal           @db.Decimal(10, 2) // 创作者收益 (95%)
  
  // 状态管理
  status          RevenueStatus     @default(PENDING)
  settledAt       DateTime?         // 结算时间
  
  // 提现信息
  withdrawnAt     DateTime?         // 提现时间
  withdrawMethod  String?           // 提现方式
  withdrawAccount String?           // 提现账户
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // 关联关系
  order    Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  solution Solution       @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  creator  CreatorProfile @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([orderId, solutionId])
  @@map("revenue_shares")
}

// 评价模型
model Review {
  id         String  @id @default(cuid())
  userId     String
  solutionId String
  rating     Int     // 1-5星评分
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 关联关系
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  solution Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  @@unique([userId, solutionId])
  @@map("reviews")
}

// 收藏模型
model Favorite {
  id         String @id @default(cuid())
  userId     String
  solutionId String
  createdAt  DateTime @default(now())

  // 关联关系
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  solution Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  @@unique([userId, solutionId])
  @@map("favorites")
}

// 用户会话模型
model UserSession {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  ipAddress  String?
  userAgent  String?

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// 邮箱验证模型
model EmailVerification {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  token     String   @unique
  type      EmailVerificationType
  expiresAt DateTime
  createdAt DateTime @default(now())
  usedAt    DateTime?

  // 关联关系
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

// 审计日志模型
model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // 关联关系
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// 文件模型
model File {
  id           String   @id @default(cuid())
  filename     String   @unique
  originalName String
  mimeType     String
  size         Int
  path         String
  url          String
  thumbnailUrl String?
  checksum     String
  width        Int?
  height       Int?
  uploadedBy   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("files")
}

// 工厂管理模型
model Factory {
  id          String   @id @default(cuid())
  name        String   // 工厂名称
  contactName String   // 联系人姓名
  contactPhone String? // 联系电话
  contactEmail String? // 联系邮箱
  address     String   // 工厂地址
  categories  String[] // 生产品类
  description String?  // 工厂描述
  status      FactoryStatus @default(ACTIVE)
  
  // 能力信息
  capacity    Int?     // 月产能
  leadTime    Int?     // 交期（天）
  minOrder    Int?     // 最小订单量
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  sampleOrders SampleOrder[]

  @@map("factories")
}

// 试产订单模型
model SampleOrder {
  id          String   @id @default(cuid())
  factoryId   String
  solutionId  String
  orderNumber String   @unique // 试产订单号
  quantity    Int      // 试产数量
  deadline    DateTime // 截止时间
  status      SampleOrderStatus @default(PENDING)
  
  // 订单详情
  notes       String?  // 订单备注
  requirements Json?   // 特殊要求
  
  // 进度跟踪
  confirmedAt DateTime? // 确认时间
  startedAt   DateTime? // 开始生产时间
  completedAt DateTime? // 完成时间
  deliveredAt DateTime? // 交付时间
  
  // 文件管理
  specFiles   String[] // 规格文件URLs
  resultFiles String[] // 结果文件URLs
  
  // 成本信息
  estimatedCost Decimal? @db.Decimal(10, 2) // 预估成本
  actualCost    Decimal? @db.Decimal(10, 2) // 实际成本
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  factory  Factory  @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  solution Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  @@map("sample_orders")
}

// 商品分类模型
model ProductCategory {
  id          String   @id @default(cuid())
  name        String   // 分类名称
  slug        String   @unique // URL友好的标识符
  description String?  // 分类描述
  image       String?  // 分类图片URL
  
  // 层级结构
  parentId    String?  // 父分类ID
  level       Int      @default(0) // 分类层级
  sortOrder   Int      @default(0) // 排序权重
  
  // 状态管理
  isActive    Boolean  @default(true) // 是否启用
  isVisible   Boolean  @default(true) // 是否在前台显示
  
  // SEO信息
  metaTitle       String? // SEO标题
  metaDescription String? // SEO描述
  metaKeywords    String? // SEO关键词
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  parent      ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("product_categories")
}

// 商品模型
model Product {
  id          String   @id @default(cuid())
  name        String   // 商品名称
  slug        String   @unique // URL友好的标识符
  description String?  // 商品描述
  shortDesc   String?  // 简短描述
  
  // 基础信息
  sku         String   @unique // 商品编码
  barcode     String?  // 条形码
  brand       String?  // 品牌
  model       String?  // 型号
  
  // 价格信息
  price       Decimal  @db.Decimal(10, 2) // 售价
  originalPrice Decimal? @db.Decimal(10, 2) // 原价
  costPrice   Decimal? @db.Decimal(10, 2) // 成本价
  
  // 分类关联
  categoryId  String   // 主分类ID
  
  // 商品属性
  weight      Decimal? @db.Decimal(8, 3) // 重量(kg)
  dimensions  Json?    // 尺寸信息 {length, width, height}
  color       String?  // 颜色
  material    String?  // 材质
  
  // 媒体资源
  images      String[] // 商品图片URLs
  videos      String[] // 商品视频URLs
  documents   String[] // 相关文档URLs
  
  // 状态管理
  status      ProductStatus @default(DRAFT)
  isActive    Boolean  @default(true) // 是否启用
  isFeatured  Boolean  @default(false) // 是否推荐
  
  // SEO信息
  metaTitle       String? // SEO标题
  metaDescription String? // SEO描述
  metaKeywords    String? // SEO关键词
  
  // 统计信息
  viewCount   Int      @default(0) // 浏览次数
  salesCount  Int      @default(0) // 销售次数
  rating      Decimal? @db.Decimal(3, 2) // 平均评分
  reviewCount Int      @default(0) // 评价数量
  
  // 关联方案（如果商品基于某个方案）
  solutionId  String?  // 关联的方案ID
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  solution    Solution?       @relation(fields: [solutionId], references: [id])
  inventory   ProductInventory?
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     ProductReview[]

  @@map("products")
}

// 商品库存模型
model ProductInventory {
  id          String   @id @default(cuid())
  productId   String   @unique // 商品ID
  
  // 库存数量
  quantity    Int      @default(0) // 当前库存
  reserved    Int      @default(0) // 预留库存
  available   Int      @default(0) // 可用库存
  
  // 库存阈值
  minStock    Int      @default(0) // 最低库存警戒线
  maxStock    Int?     // 最高库存限制
  reorderPoint Int?    // 补货点
  reorderQty  Int?     // 补货数量
  
  // 库存状态
  status      InventoryStatus @default(IN_STOCK)
  
  // 成本信息
  avgCost     Decimal? @db.Decimal(10, 2) // 平均成本
  lastCost    Decimal? @db.Decimal(10, 2) // 最近成本
  
  // 时间记录
  lastStockIn  DateTime? // 最后入库时间
  lastStockOut DateTime? // 最后出库时间
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_inventory")
}

// 购物车模型
model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique // 用户ID
  
  // 购物车状态
  status    CartStatus @default(ACTIVE)
  
  // 会话信息（用于未登录用户）
  sessionId String?  // 会话ID
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

// 购物车项目模型
model CartItem {
  id        String   @id @default(cuid())
  cartId    String   // 购物车ID
  productId String   // 商品ID
  quantity  Int      // 数量
  
  // 价格快照（添加到购物车时的价格）
  unitPrice Decimal  @db.Decimal(10, 2) // 单价
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId]) // 同一购物车中同一商品只能有一条记录
  @@map("cart_items")
}

// 订单项目模型（扩展现有订单系统）
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String   // 订单ID
  productId String   // 商品ID
  quantity  Int      // 数量
  
  // 价格快照（下单时的价格）
  unitPrice Decimal  @db.Decimal(10, 2) // 单价
  totalPrice Decimal @db.Decimal(10, 2) // 小计
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// 商品评价模型
model ProductReview {
  id        String   @id @default(cuid())
  productId String   // 商品ID
  userId    String   // 用户ID
  orderId   String?  // 关联订单ID（确保用户购买过该商品）
  
  // 评价内容
  rating    Int      // 评分(1-5)
  title     String?  // 评价标题
  content   String?  // 评价内容
  
  // 媒体资源
  images    String[] // 评价图片
  videos    String[] // 评价视频
  
  // 状态管理
  status    ReviewStatus @default(PENDING) // 审核状态
  isVerified Boolean  @default(false) // 是否已验证购买
  
  // 互动统计
  helpfulCount Int    @default(0) // 有用数
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  order     Order?  @relation(fields: [orderId], references: [id])

  @@unique([productId, userId, orderId]) // 每个订单中每个商品只能评价一次
  @@map("product_reviews")
}

// 枚举类型
enum UserRole {
  USER
  CREATOR
  ADMIN
}

enum CreatorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum SolutionStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  ALIPAY
  WECHAT_PAY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum RevenueStatus {
  PENDING
  AVAILABLE
  WITHDRAWN
  PROCESSING
}

enum EmailVerificationType {
  REGISTRATION
  PASSWORD_RESET
  EMAIL_CHANGE
}

enum FactoryStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SampleOrderStatus {
  PENDING      // 待确认
  CONFIRMED    // 已确认
  IN_PROGRESS  // 生产中
  COMPLETED    // 已完成
  DELIVERED    // 已交付
  CANCELLED    // 已取消
}

// 方案文件类型枚举
enum SolutionFileType {
  IMAGE        // 图片文件
  DOCUMENT     // 文档文件(PDF, DOC等)
  CAD_FILE     // CAD文件(DWG, STEP等)
  CODE         // 代码文件
  SCHEMATIC    // 电路图
  PCB          // PCB文件
  FIRMWARE     // 固件文件
  MANUAL       // 说明书
  VIDEO        // 视频文件
  OTHER        // 其他文件
}

// 文件状态枚举
enum FileStatus {
  ACTIVE       // 活跃
  ARCHIVED     // 已归档
  DELETED      // 已删除
  PROCESSING   // 处理中
}

// 审核状态枚举
enum ReviewStatus {
  PENDING      // 待审核
  IN_PROGRESS  // 审核中
  COMPLETED    // 审核完成
  CANCELLED    // 审核取消
}

// 审核决策枚举
enum ReviewDecision {
  APPROVED     // 通过
  REJECTED     // 拒绝
  NEEDS_REVISION // 需要修改
  PENDING      // 待决策
}

// 商品状态枚举
enum ProductStatus {
  DRAFT        // 草稿
  PENDING      // 待审核
  APPROVED     // 已审核
  PUBLISHED    // 已发布
  ARCHIVED     // 已归档
  DISCONTINUED // 已停产
}

// 库存状态枚举
enum InventoryStatus {
  IN_STOCK     // 有库存
  LOW_STOCK    // 库存不足
  OUT_OF_STOCK // 缺货
  DISCONTINUED // 停产
  RESERVED     // 预留
}

// 购物车状态枚举
enum CartStatus {
  ACTIVE       // 活跃
  ABANDONED    // 已放弃
  CONVERTED    // 已转换为订单
  EXPIRED      // 已过期
}

// 通知类型枚举
enum NotificationType {
  INFO         // 信息
  SUCCESS      // 成功
  WARNING      // 警告
  ERROR        // 错误
  REVIEW       // 审核
  SYSTEM       // 系统
}

// 通知优先级枚举
enum NotificationPriority {
  LOW          // 低
  MEDIUM       // 中
  HIGH         // 高
  URGENT       // 紧急
}

// 通知模型
model Notification {
  id             String               @id @default(cuid())
  type           NotificationType
  title          String
  message        String
  userId         String
  actionUrl      String?
  metadata       Json?                @default("{}")
  priority       NotificationPriority @default(MEDIUM)
  channels       String[]             // 发送渠道
  scheduledAt    DateTime?            // 计划发送时间
  expiresAt      DateTime?            // 过期时间
  read           Boolean              @default(false)
  readAt         DateTime?            // 阅读时间
  delivered      Boolean              @default(true)
  deliveryStatus Json?                @default("{}")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// 通知偏好模型
model NotificationPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailEnabled          Boolean  @default(true)
  pushEnabled           Boolean  @default(true)
  websocketEnabled      Boolean  @default(true)
  reviewNotifications   Boolean  @default(true)
  systemNotifications   Boolean  @default(true)
  marketingNotifications Boolean @default(false)
  quietHoursStart       String?  // HH:mm format
  quietHoursEnd         String?  // HH:mm format
  timezone              String   @default("Asia/Shanghai")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

// 协作会话模型
model CollaborationSession {
  id           String   @id @default(cuid())
  documentId   String   // 文档ID
  documentType String   // 文档类型 (solution, proposal, document)
  userId       String   // 用户ID
  sessionId    String   @unique // 会话标识符
  joinedAt     DateTime @default(now())
  lastActivity DateTime @default(now())
  leftAt       DateTime? // 离开时间
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("collaboration_sessions")
}

// 协作操作模型
model CollaborationOperation {
  id          String   @id @default(cuid())
  documentId  String   // 文档ID
  operationId String   @unique // 操作标识符
  type        String   // 操作类型 (insert, delete, replace)
  position    Json     // 操作位置 {line, column}
  content     String?  // 插入/替换的内容
  length      Int?     // 删除/替换的长度
  userId      String   // 操作用户ID
  version     Int      // 文档版本号
  timestamp   DateTime // 操作时间戳
  
  createdAt   DateTime @default(now())

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("collaboration_operations")
}
