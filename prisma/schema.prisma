// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  firstName     String?
  lastName      String?
  avatar        String?
  role          String   @default("USER") // USER, CREATOR, ADMIN
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  creatorProfile    CreatorProfile?
  solutions         Solution[]
  orders            Order[]
  reviews           Review[]
  sessions          UserSession[]
  auditLogs         AuditLog[]

  @@map("users")
}

// 创作者档案
model CreatorProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  website     String?
  experience  String?
  specialties String   // JSON string for array
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED, SUSPENDED
  revenue     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  solutions     Solution[]

  @@map("creator_profiles")
}

// 解决方案模型
model Solution {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  price       Float
  status      String   @default("DRAFT") // DRAFT, PENDING_REVIEW, APPROVED, REJECTED, PUBLISHED, ARCHIVED
  images      String   // JSON string for array
  features    String   // JSON string for array
  specs       String?  // JSON string
  bom         String?  // JSON string
  creatorId   String
  userId      String   // 添加用户关联
  
  // 版本控制
  version     Int      @default(1)
  
  // 审核相关
  submittedAt DateTime? // 提交审核时间
  reviewedAt  DateTime? // 审核完成时间
  reviewNotes String?   // 审核备注
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  creator       CreatorProfile  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        OrderSolution[]
  reviews       Review[]

  @@map("solutions")
}

// 订单模型
model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  userId      String
  status      String   @default("PENDING") // PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  totalAmount Float
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  solutions OrderSolution[]

  @@map("orders")
}

// 订单解决方案关联表
model OrderSolution {
  id         String @id @default(cuid())
  orderId    String
  solutionId String
  quantity   Int    @default(1)
  price      Float

  // 关联关系
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  solution Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  @@unique([orderId, solutionId])
  @@map("order_solutions")
}

// 评价模型
model Review {
  id         String   @id @default(cuid())
  userId     String
  solutionId String
  rating     Int      // 1-5
  title      String?
  content    String?
  status     String   @default("PENDING") // PENDING, APPROVED, REJECTED
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 关联关系
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  solution Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  @@unique([userId, solutionId])
  @@map("reviews")
}

// 用户会话模型
model UserSession {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  ipAddress  String?
  userAgent  String?

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// 审计日志模型
model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldValues  String? // JSON string
  newValues  String? // JSON string
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // 关联关系
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}