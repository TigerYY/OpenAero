# 生产环境Dockerfile
FROM node:18-alpine AS base

WORKDIR /app

# 复制包管理文件
COPY package.json package-lock.json ./

# 安装生产依赖
RUN npm ci --only=production && npm cache clean --force

# 构建阶段
FROM node:18-alpine AS builder
WORKDIR /app

# 复制包管理文件
COPY package.json package-lock.json ./

# 安装所有依赖
RUN npm ci

# 复制源代码
COPY . .

# 设置环境变量
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# 生成Prisma客户端
RUN npx prisma generate

# 构建应用（跳过ESLint检查）
ENV ESLINT_NO_DEV_ERRORS=true
RUN npm run build

# 生产阶段
FROM node:18-alpine AS runner
WORKDIR /app

# 设置环境变量
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# 创建非root用户
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# 复制构建产物
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# 复制Prisma文件
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# 复制必要的配置文件
COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/sentry.*.config.ts ./

# 设置权限
RUN chown -R nextjs:nodejs /app
USER nextjs

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

# 启动应用
CMD ["node", "server.js"]
