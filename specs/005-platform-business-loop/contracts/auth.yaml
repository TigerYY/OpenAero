openapi: 3.0.3
info:
  title: OpenAero Authentication API
  description: User authentication and authorization endpoints
  version: 1.0.0
  contact:
    name: OpenAero Platform
    email: dev@openaero.com

servers:
  - url: https://api.openaero.com/v1
    description: Production server
  - url: https://staging-api.openaero.com/v1
    description: Staging server

paths:
  /auth/register:
    post:
      summary: Register new user
      description: Create a new user account with email verification
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - role
              properties:
                email:
                  type: string
                  format: email
                  example: "creator@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "SecurePass123!"
                role:
                  type: string
                  enum: [creator, customer]
                  example: "creator"
                profile:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "张三"
                    company:
                      type: string
                      example: "无人机科技有限公司"
                    phone:
                      type: string
                      example: "+86 138 0013 8000"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "注册成功，请检查邮箱完成验证"
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        format: uuid
                        example: "123e4567-e89b-12d3-a456-426614174000"
                      email:
                        type: string
                        example: "creator@example.com"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-email:
    post:
      summary: Verify email address
      description: Verify user email with token from verification email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "邮箱验证成功"
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refresh_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Invalid or expired token

  /auth/login:
    post:
      summary: User login
      description: Authenticate user with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "creator@example.com"
                password:
                  type: string
                  example: "SecurePass123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "登录成功"
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refresh_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get new access token using refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refresh_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid refresh token

  /auth/logout:
    post:
      summary: User logout
      description: Invalidate user session and tokens
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "退出登录成功"

  /auth/forgot-password:
    post:
      summary: Request password reset
      description: Send password reset email to user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "creator@example.com"
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "密码重置邮件已发送"

  /auth/reset-password:
    post:
      summary: Reset password
      description: Reset user password with token from reset email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                password:
                  type: string
                  minLength: 8
                  example: "NewSecurePass123!"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "密码重置成功"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "creator@example.com"
        role:
          type: string
          enum: [creator, customer, admin]
          example: "creator"
        status:
          type: string
          enum: [pending, active, suspended, deleted]
          example: "active"
        profile:
          type: object
          properties:
            name:
              type: string
              example: "张三"
            company:
              type: string
              example: "无人机科技有限公司"
            phone:
              type: string
              example: "+86 138 0013 8000"
            avatar_url:
              type: string
              format: uri
              example: "https://cdn.openaero.com/avatars/user123.jpg"
            bio:
              type: string
              example: "专业无人机解决方案提供商"
            expertise:
              type: array
              items:
                type: string
              example: ["农业无人机", "测绘无人机", "物流无人机"]
            location:
              type: string
              example: "北京市海淀区"
        created_at:
          type: string
          format: date-time
          example: "2025-01-26T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-26T10:00:00Z"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "请求参数验证失败"
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "邮箱格式不正确"

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'