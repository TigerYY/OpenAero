openapi: 3.0.3
info:
  title: Deployment Optimization Build API
  description: API for managing build processes and deployment optimization
  version: 1.0.0
  contact:
    name: OpenAero Development Team
    email: dev@openaero.cn

servers:
  - url: https://api.openaero.cn/v1
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

paths:
  /build/status:
    get:
      summary: Get build status
      description: Retrieve current build status and progress
      operationId: getBuildStatus
      responses:
        '200':
          description: Build status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildStatus'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /build/start:
    post:
      summary: Start build process
      description: Initiate a new build process with specified configuration
      operationId: startBuild
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildRequest'
      responses:
        '202':
          description: Build process started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildResponse'
        '400':
          description: Invalid build configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /build/{buildId}/logs:
    get:
      summary: Get build logs
      description: Retrieve build logs for a specific build
      operationId: getBuildLogs
      parameters:
        - name: buildId
          in: path
          required: true
          schema:
            type: string
          description: Build identifier
        - name: level
          in: query
          required: false
          schema:
            type: string
            enum: [debug, info, warn, error]
          description: Log level filter
      responses:
        '200':
          description: Build logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildLogs'
        '404':
          description: Build not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dependencies/check:
    get:
      summary: Check dependency status
      description: Check for outdated dependencies and security issues
      operationId: checkDependencies
      responses:
        '200':
          description: Dependency status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyStatus'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dependencies/update:
    post:
      summary: Update dependencies
      description: Update dependencies with specified strategy
      operationId: updateDependencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependencyUpdateRequest'
      responses:
        '200':
          description: Dependencies updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyUpdateResponse'
        '400':
          description: Invalid update configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      summary: Health check
      description: Check system health and readiness
      operationId: healthCheck
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    BuildStatus:
      type: object
      required:
        - status
        - progress
        - timestamp
      properties:
        status:
          type: string
          enum: [pending, running, success, failed, cancelled]
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: Build progress percentage
        timestamp:
          type: string
          format: date-time
        duration:
          type: integer
          description: Build duration in seconds
        errors:
          type: array
          items:
            $ref: '#/components/schemas/BuildError'
        warnings:
          type: array
          items:
            type: string

    BuildRequest:
      type: object
      required:
        - environment
        - configuration
      properties:
        environment:
          type: string
          enum: [development, staging, production]
        configuration:
          $ref: '#/components/schemas/BuildConfiguration'
        options:
          $ref: '#/components/schemas/BuildOptions'

    BuildConfiguration:
      type: object
      properties:
        typescript:
          $ref: '#/components/schemas/TypeScriptConfig'
        optimization:
          $ref: '#/components/schemas/OptimizationConfig'
        testing:
          $ref: '#/components/schemas/TestingConfig'

    TypeScriptConfig:
      type: object
      properties:
        strict:
          type: boolean
        exactOptionalPropertyTypes:
          type: boolean
        noImplicitOverride:
          type: boolean
        noUncheckedIndexedAccess:
          type: boolean

    OptimizationConfig:
      type: object
      properties:
        minify:
          type: boolean
        treeshake:
          type: boolean
        codeSplit:
          type: boolean
        bundleAnalyze:
          type: boolean

    TestingConfig:
      type: object
      properties:
        unit:
          type: boolean
        integration:
          type: boolean
        e2e:
          type: boolean
        coverage:
          type: integer
          minimum: 0
          maximum: 100

    BuildOptions:
      type: object
      properties:
        clean:
          type: boolean
        cache:
          type: boolean
        verbose:
          type: boolean
        parallel:
          type: boolean

    BuildResponse:
      type: object
      required:
        - buildId
        - status
        - timestamp
      properties:
        buildId:
          type: string
        status:
          type: string
          enum: [started, queued, failed]
        timestamp:
          type: string
          format: date-time
        estimatedDuration:
          type: integer
          description: Estimated build duration in seconds

    BuildError:
      type: object
      required:
        - message
        - level
        - timestamp
      properties:
        message:
          type: string
        level:
          type: string
          enum: [error, warning, info]
        timestamp:
          type: string
          format: date-time
        file:
          type: string
        line:
          type: integer
        column:
          type: integer

    BuildLogs:
      type: object
      required:
        - buildId
        - logs
      properties:
        buildId:
          type: string
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'

    LogEntry:
      type: object
      required:
        - level
        - message
        - timestamp
      properties:
        level:
          type: string
          enum: [debug, info, warn, error]
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        source:
          type: string

    DependencyStatus:
      type: object
      required:
        - total
        - outdated
        - vulnerabilities
      properties:
        total:
          type: integer
        outdated:
          type: integer
        vulnerabilities:
          type: integer
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/Dependency'

    Dependency:
      type: object
      required:
        - name
        - currentVersion
        - latestVersion
        - status
      properties:
        name:
          type: string
        currentVersion:
          type: string
        latestVersion:
          type: string
        status:
          type: string
          enum: [up-to-date, outdated, vulnerable]
        vulnerabilities:
          type: array
          items:
            type: string

    DependencyUpdateRequest:
      type: object
      required:
        - strategy
      properties:
        strategy:
          type: string
          enum: [progressive, immediate, selective]
        packages:
          type: array
          items:
            type: string
        dryRun:
          type: boolean

    DependencyUpdateResponse:
      type: object
      required:
        - status
        - updated
        - failed
      properties:
        status:
          type: string
          enum: [success, partial, failed]
        updated:
          type: array
          items:
            type: string
        failed:
          type: array
          items:
            $ref: '#/components/schemas/UpdateError'

    UpdateError:
      type: object
      required:
        - package
        - error
      properties:
        package:
          type: string
        error:
          type: string
        reason:
          type: string

    HealthStatus:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, degraded]
        timestamp:
          type: string
          format: date-time
        services:
          type: object
          additionalProperties:
            type: string
            enum: [up, down, degraded]

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        details:
          type: object
