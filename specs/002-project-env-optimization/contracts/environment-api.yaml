openapi: 3.0.3
info:
  title: OpenAero Environment Management API
  description: API for managing development environment configuration and validation
  version: 1.0.0
  contact:
    name: OpenAero Development Team
    email: dev@openaero.cn
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.openaero.cn
    description: Production server

paths:
  /environment/status:
    get:
      summary: Get environment status
      description: Returns the current status of the development environment
      operationId: getEnvironmentStatus
      tags:
        - Environment
      responses:
        '200':
          description: Environment status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentStatus'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /environment/validate:
    post:
      summary: Validate environment configuration
      description: Validates the current environment configuration and returns any issues
      operationId: validateEnvironment
      tags:
        - Environment
      responses:
        '200':
          description: Validation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /environment/start:
    post:
      summary: Start development server
      description: Starts the development server with validation
      operationId: startDevelopmentServer
      tags:
        - Environment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartServerRequest'
      responses:
        '200':
          description: Server started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartServerResponse'
        '400':
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /environment/stop:
    post:
      summary: Stop development server
      description: Stops the development server and cleans up resources
      operationId: stopDevelopmentServer
      tags:
        - Environment
      responses:
        '200':
          description: Server stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopServerResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /environment/clean:
    post:
      summary: Clean environment
      description: Cleans up temporary files and resets environment state
      operationId: cleanEnvironment
      tags:
        - Environment
      responses:
        '200':
          description: Environment cleaned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanEnvironmentResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /configuration/files:
    get:
      summary: List configuration files
      description: Returns a list of all configuration files in the project
      operationId: listConfigurationFiles
      tags:
        - Configuration
      responses:
        '200':
          description: Configuration files retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigurationFile'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /configuration/files/{fileId}:
    get:
      summary: Get configuration file
      description: Returns the content of a specific configuration file
      operationId: getConfigurationFile
      tags:
        - Configuration
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
          description: Configuration file ID
      responses:
        '200':
          description: Configuration file retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFile'
        '404':
          description: Configuration file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update configuration file
      description: Updates the content of a specific configuration file
      operationId: updateConfigurationFile
      tags:
        - Configuration
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
          description: Configuration file ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfigurationFileRequest'
      responses:
        '200':
          description: Configuration file updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFile'
        '400':
          description: Bad request - invalid configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Configuration file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dependencies:
    get:
      summary: List dependencies
      description: Returns a list of all project dependencies
      operationId: listDependencies
      tags:
        - Dependencies
      responses:
        '200':
          description: Dependencies retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dependency'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dependencies/check:
    post:
      summary: Check dependencies
      description: Checks dependencies for updates and vulnerabilities
      operationId: checkDependencies
      tags:
        - Dependencies
      responses:
        '200':
          description: Dependency check completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyCheckResult'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dependencies/install:
    post:
      summary: Install dependencies
      description: Installs or updates project dependencies
      operationId: installDependencies
      tags:
        - Dependencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallDependenciesRequest'
      responses:
        '200':
          description: Dependencies installed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallDependenciesResponse'
        '400':
          description: Bad request - invalid dependencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    EnvironmentStatus:
      type: object
      required:
        - status
        - lastChecked
        - startupTime
        - compilationTime
        - memoryUsage
        - activePorts
        - errors
      properties:
        status:
          type: string
          enum: [healthy, degraded, error, unknown]
          description: Current environment status
        lastChecked:
          type: string
          format: date-time
          description: Last health check timestamp
        startupTime:
          type: number
          description: Server startup time in milliseconds
        compilationTime:
          type: number
          description: TypeScript compilation time in milliseconds
        memoryUsage:
          type: number
          description: Memory usage in MB
        cpuUsage:
          type: number
          description: CPU usage percentage
        activePorts:
          type: array
          items:
            type: number
          description: List of active ports
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationError'
          description: Current errors

    ValidationResult:
      type: object
      required:
        - isValid
        - errors
        - warnings
        - timestamp
      properties:
        isValid:
          type: boolean
          description: Whether the configuration is valid
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationError'
          description: Configuration errors
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationError'
          description: Configuration warnings
        timestamp:
          type: string
          format: date-time
          description: Validation timestamp

    StartServerRequest:
      type: object
      properties:
        port:
          type: number
          description: Port number to start server on
          default: 3000
        clean:
          type: boolean
          description: Whether to clean environment before starting
          default: true
        validate:
          type: boolean
          description: Whether to validate configuration before starting
          default: true

    StartServerResponse:
      type: object
      required:
        - success
        - port
        - startupTime
        - url
      properties:
        success:
          type: boolean
          description: Whether server started successfully
        port:
          type: number
          description: Port server is running on
        startupTime:
          type: number
          description: Startup time in milliseconds
        url:
          type: string
          description: Server URL
        message:
          type: string
          description: Additional information

    StopServerResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether server stopped successfully
        message:
          type: string
          description: Additional information

    CleanEnvironmentResponse:
      type: object
      required:
        - success
        - cleanedFiles
      properties:
        success:
          type: boolean
          description: Whether cleanup was successful
        cleanedFiles:
          type: array
          items:
            type: string
          description: List of cleaned files
        message:
          type: string
          description: Additional information

    ConfigurationFile:
      type: object
      required:
        - id
        - name
        - path
        - type
        - isValid
        - lastModified
      properties:
        id:
          type: string
          description: Unique file identifier
        name:
          type: string
          description: File name
        path:
          type: string
          description: File path
        type:
          type: string
          enum: [package, typescript, nextjs, tailwind, jest, eslint, prettier, other]
          description: Configuration file type
        content:
          type: string
          description: File content
        isValid:
          type: boolean
          description: Whether file is valid
        lastModified:
          type: string
          format: date-time
          description: Last modification time
        size:
          type: number
          description: File size in bytes

    UpdateConfigurationFileRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: New file content
        validate:
          type: boolean
          description: Whether to validate after update
          default: true

    Dependency:
      type: object
      required:
        - id
        - name
        - version
        - type
        - isInstalled
        - isCompatible
      properties:
        id:
          type: string
          description: Unique dependency identifier
        name:
          type: string
          description: Package name
        version:
          type: string
          description: Installed version
        requiredVersion:
          type: string
          description: Required version range
        type:
          type: string
          enum: [production, development, peer, optional]
          description: Dependency type
        isInstalled:
          type: boolean
          description: Whether dependency is installed
        isCompatible:
          type: boolean
          description: Whether version is compatible
        lastChecked:
          type: string
          format: date-time
          description: Last compatibility check
        vulnerabilities:
          type: array
          items:
            $ref: '#/components/schemas/Vulnerability'
          description: Security vulnerabilities

    Vulnerability:
      type: object
      required:
        - id
        - packageName
        - severity
        - title
        - description
      properties:
        id:
          type: string
          description: Unique vulnerability identifier
        packageName:
          type: string
          description: Affected package name
        version:
          type: string
          description: Affected version
        severity:
          type: string
          enum: [critical, high, medium, low]
          description: Vulnerability severity
        title:
          type: string
          description: Vulnerability title
        description:
          type: string
          description: Vulnerability description
        cve:
          type: string
          description: CVE identifier
        patchedIn:
          type: string
          description: Fixed in version
        advisoryUrl:
          type: string
          description: Security advisory URL
        discoveredAt:
          type: string
          format: date-time
          description: Discovery date

    DependencyCheckResult:
      type: object
      required:
        - totalDependencies
        - outdatedDependencies
        - vulnerableDependencies
        - timestamp
      properties:
        totalDependencies:
          type: number
          description: Total number of dependencies
        outdatedDependencies:
          type: number
          description: Number of outdated dependencies
        vulnerableDependencies:
          type: number
          description: Number of vulnerable dependencies
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/Dependency'
          description: Updated dependency information
        timestamp:
          type: string
          format: date-time
          description: Check timestamp

    InstallDependenciesRequest:
      type: object
      properties:
        dependencies:
          type: array
          items:
            type: string
          description: List of dependencies to install
        dev:
          type: boolean
          description: Whether to install as dev dependencies
          default: false
        update:
          type: boolean
          description: Whether to update existing dependencies
          default: false

    InstallDependenciesResponse:
      type: object
      required:
        - success
        - installedDependencies
      properties:
        success:
          type: boolean
          description: Whether installation was successful
        installedDependencies:
          type: array
          items:
            type: string
          description: List of installed dependencies
        message:
          type: string
          description: Additional information

    ConfigurationError:
      type: object
      required:
        - id
        - type
        - severity
        - message
        - timestamp
      properties:
        id:
          type: string
          description: Unique error identifier
        type:
          type: string
          enum: [error, warning, info]
          description: Error type
        severity:
          type: string
          enum: [critical, high, medium, low]
          description: Error severity
        message:
          type: string
          description: Error message
        file:
          type: string
          description: Affected file path
        line:
          type: number
          description: Line number
        column:
          type: number
          description: Column number
        code:
          type: string
          description: Error code
        suggestion:
          type: string
          description: Resolution suggestion
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

tags:
  - name: Environment
    description: Environment management operations
  - name: Configuration
    description: Configuration file management
  - name: Dependencies
    description: Dependency management
